package util

// flogoAPITemplate template for flogo api app
const flogoAPITemplate = `
package main

import (
	"log"

	_ "github.com/project-flogo/contrib/activity/log"
	trigger "github.com/project-flogo/contrib/trigger/rest"
	"github.com/project-flogo/core/api"
	"github.com/project-flogo/core/engine"
	"github.com/project-flogo/flow"
)

var flogoResData = "{\"name\": \"SampleFlow\", \"tasks\": [	{ \"id\": \"log_message\", \"name\": \"Log Message\", \"description\": \"Simple Log Activity\", \"activity\": {	\"ref\": \"github.com/project-flogo/contrib/activity/log\",	\"input\": { \"message\": \"Simple Log\", \"addDetails\": \"false\"	} }} ] }"

func main() {
	app := api.NewApp()

	trg := app.NewTrigger(&trigger.Trigger{}, &trigger.Settings{Port: {{.Port}}})

	var handler *api.Handler
	var act *api.Action
	var err error
	{{- range .PathData }}
	{{$pathURL := .PathURL}}
	{{- range .MethodData }}
	handler, err = trg.NewHandler(&trigger.HandlerSettings{
		Method: "{{.MethodType}}",
		Path:   "{{$pathURL}}",
	})
	if err != nil {
		log.Fatal(err)
	}

	act, err = handler.NewAction(&flow.FlowAction{}, map[string]interface{}{"flowURI": "res://flow:sample_flow"})
	if err != nil {
		log.Fatal(err)
	}

	act.SetOutputMappings(" data ='success response from autogenerated flogo app - operation id : {{.HandlerName}}'")

	{{- end }}{{- end }}

	app.AddResource("flow:sample_flow", []byte(flogoResData))

	eng, err := api.NewEngine(app)
	if err != nil {
		log.Fatal(err)
	}

	engine.RunEngine(eng)
}
`

const flogoAppDescriptor = `
{
	"name": "SampleApp",
	"type": "flogo:app",
	"version": "0.0.1",
	"appModel": "1.1.0",
	"imports": [
		"github.com/project-flogo/contrib/trigger/rest",
		"github.com/project-flogo/flow",
		"github.com/project-flogo/contrib/activity/log"
	],
	"triggers": [
	  {
			"id": "receive_http_message",
			"ref": "#rest",
			"name": "Receive HTTP Message",
			"description": "Simple REST Trigger",
			"settings": {
				"port": {{.Port}}
			},
			"handlers": [
			{{ $pathsLen := len .PathData }} {{- range $index , $element := .PathData }} {{ $pathIndex := increment $index }}	{{$pathURL := .PathURL}}	{{ $mthdLen := len .MethodData }} {{- range $mindex , $melement := .MethodData }} {{ $methodIndex := increment $mindex }}
				{
					"settings": {
						"method": "{{.MethodType}}",
						"path": "{{$pathURL}}"
					},
					"action": {
						"ref": "#flow",
						"settings": {
						"flowURI": "res://flow:sample_flow"
						}
					}
				}{{ if eq $pathsLen $pathIndex }}{{ if eq $mthdLen $methodIndex }}{{else}},{{end}}{{else}},{{end}}
			{{- end }} {{- end }}
			]
	  }
	],
	"resources": [
	  {
			"id": "flow:sample_flow",
			"data": {
				"name": "SampleFlow",
				"tasks": [
				{
					"id": "log_message",
					"name": "Log Message",
					"description": "Simple Log Activity",
					"activity": {
						"ref": "#log",
						"input": {
							"message": "Simple Log",
							"addDetails": "false"
						}
					}
				}
				]
			}
	  }
	]
  }
`
